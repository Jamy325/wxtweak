#line 1 "/Users/jamy/works/wxtweak/wxtweak/MMMonitorConfigMgr.xm"
#include "wxUtil.h"


#if defined(__clang__)
#if __has_feature(objc_arc)
#define _LOGOS_SELF_TYPE_NORMAL __unsafe_unretained
#define _LOGOS_SELF_TYPE_INIT __attribute__((ns_consumed))
#define _LOGOS_SELF_CONST const
#define _LOGOS_RETURN_RETAINED __attribute__((ns_returns_retained))
#else
#define _LOGOS_SELF_TYPE_NORMAL
#define _LOGOS_SELF_TYPE_INIT
#define _LOGOS_SELF_CONST
#define _LOGOS_RETURN_RETAINED
#endif
#else
#define _LOGOS_SELF_TYPE_NORMAL
#define _LOGOS_SELF_TYPE_INIT
#define _LOGOS_SELF_CONST
#define _LOGOS_RETURN_RETAINED
#endif

#include <substrate.h>
@class MMMonitorConfigMgr; 
static void (*_logos_orig$_ungrouped$MMMonitorConfigMgr$onReceiveStrategy$withContene$)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, int, id); static void _logos_method$_ungrouped$MMMonitorConfigMgr$onReceiveStrategy$withContene$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, int, id); static void (*_logos_orig$_ungrouped$MMMonitorConfigMgr$saveIsMonitorState$)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, _Bool); static void _logos_method$_ungrouped$MMMonitorConfigMgr$saveIsMonitorState$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, _Bool); static _Bool (*_logos_orig$_ungrouped$MMMonitorConfigMgr$saveAlreadyUploadCnt$)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, unsigned long long); static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$saveAlreadyUploadCnt$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, unsigned long long); static unsigned long long (*_logos_orig$_ungrouped$MMMonitorConfigMgr$getAlreadyUploadCnt)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static unsigned long long _logos_method$_ungrouped$MMMonitorConfigMgr$getAlreadyUploadCnt(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static unsigned long long (*_logos_orig$_ungrouped$MMMonitorConfigMgr$getReportEnv)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static unsigned long long _logos_method$_ungrouped$MMMonitorConfigMgr$getReportEnv(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static unsigned long long (*_logos_orig$_ungrouped$MMMonitorConfigMgr$getOneTimeUpload)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static unsigned long long _logos_method$_ungrouped$MMMonitorConfigMgr$getOneTimeUpload(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static unsigned long long (*_logos_orig$_ungrouped$MMMonitorConfigMgr$getMaxDailyReport)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static unsigned long long _logos_method$_ungrouped$MMMonitorConfigMgr$getMaxDailyReport(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static _Bool (*_logos_orig$_ungrouped$MMMonitorConfigMgr$getIsAutoReport)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$getIsAutoReport(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static _Bool (*_logos_orig$_ungrouped$MMMonitorConfigMgr$getIsMonitor)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$getIsMonitor(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static _Bool (*_logos_orig$_ungrouped$MMMonitorConfigMgr$isIPXXExpired)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$isIPXXExpired(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$MMMonitorConfigMgr$onStategy$)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$MMMonitorConfigMgr$onStategy$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$MMMonitorConfigMgr$onIPXX$)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$MMMonitorConfigMgr$onIPXX$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$MMMonitorConfigMgr$onIPXXReportBlockDump$)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$MMMonitorConfigMgr$onIPXXReportBlockDump$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$MMMonitorConfigMgr$onIPXXStrategy$)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$MMMonitorConfigMgr$onIPXXStrategy$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, id); static _Bool (*_logos_orig$_ungrouped$MMMonitorConfigMgr$parseCommonNode$toConfig$)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, struct XmlReaderNode_t *, id); static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$parseCommonNode$toConfig$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL, struct XmlReaderNode_t *, id); static id (*_logos_orig$_ungrouped$MMMonitorConfigMgr$getConfigFilePath)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static id _logos_method$_ungrouped$MMMonitorConfigMgr$getConfigFilePath(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$MMMonitorConfigMgr$saveDumpReportConfig)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$MMMonitorConfigMgr$saveDumpReportConfig(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static _Bool (*_logos_orig$_ungrouped$MMMonitorConfigMgr$updateAlreadyUploadCnt)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$updateAlreadyUploadCnt(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$MMMonitorConfigMgr$loadConfig)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$MMMonitorConfigMgr$loadConfig(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$MMMonitorConfigMgr$onTimeCheck)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$MMMonitorConfigMgr$onTimeCheck(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$MMMonitorConfigMgr$onServiceInit)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$MMMonitorConfigMgr$onServiceInit(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$MMMonitorConfigMgr$dealloc)(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$MMMonitorConfigMgr$dealloc(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST, SEL); static MMMonitorConfigMgr* (*_logos_orig$_ungrouped$MMMonitorConfigMgr$init)(_LOGOS_SELF_TYPE_INIT MMMonitorConfigMgr*, SEL) _LOGOS_RETURN_RETAINED; static MMMonitorConfigMgr* _logos_method$_ungrouped$MMMonitorConfigMgr$init(_LOGOS_SELF_TYPE_INIT MMMonitorConfigMgr*, SEL) _LOGOS_RETURN_RETAINED; 

#line 4 "/Users/jamy/works/wxtweak/wxtweak/MMMonitorConfigMgr.xm"


static void _logos_method$_ungrouped$MMMonitorConfigMgr$onReceiveStrategy$withContene$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd, int arg1, id arg2) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> onReceiveStrategy:%d withContene:%@]", self, arg1, arg2); _logos_orig$_ungrouped$MMMonitorConfigMgr$onReceiveStrategy$withContene$(self, _cmd, arg1, arg2); }
static void _logos_method$_ungrouped$MMMonitorConfigMgr$saveIsMonitorState$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd, _Bool arg1) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> saveIsMonitorState:%d]", self, arg1); _logos_orig$_ungrouped$MMMonitorConfigMgr$saveIsMonitorState$(self, _cmd, arg1); }
static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$saveAlreadyUploadCnt$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd, unsigned long long arg1) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> saveAlreadyUploadCnt:%llu]", self, arg1); _Bool r = _logos_orig$_ungrouped$MMMonitorConfigMgr$saveAlreadyUploadCnt$(self, _cmd, arg1); HBLogDebug(@" = %d", r); return r; }
static unsigned long long _logos_method$_ungrouped$MMMonitorConfigMgr$getAlreadyUploadCnt(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> getAlreadyUploadCnt]", self); unsigned long long r = _logos_orig$_ungrouped$MMMonitorConfigMgr$getAlreadyUploadCnt(self, _cmd); HBLogDebug(@" = %llu", r); return r; }
static unsigned long long _logos_method$_ungrouped$MMMonitorConfigMgr$getReportEnv(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> getReportEnv]", self); unsigned long long r = _logos_orig$_ungrouped$MMMonitorConfigMgr$getReportEnv(self, _cmd); HBLogDebug(@" = %llu", r); return r; }
static unsigned long long _logos_method$_ungrouped$MMMonitorConfigMgr$getOneTimeUpload(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> getOneTimeUpload]", self); unsigned long long r = _logos_orig$_ungrouped$MMMonitorConfigMgr$getOneTimeUpload(self, _cmd); HBLogDebug(@" = %llu", r); return r; }
static unsigned long long _logos_method$_ungrouped$MMMonitorConfigMgr$getMaxDailyReport(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> getMaxDailyReport]", self); unsigned long long r = _logos_orig$_ungrouped$MMMonitorConfigMgr$getMaxDailyReport(self, _cmd); HBLogDebug(@" = %llu", r); return r; }
static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$getIsAutoReport(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> getIsAutoReport]", self); _Bool r = _logos_orig$_ungrouped$MMMonitorConfigMgr$getIsAutoReport(self, _cmd); HBLogDebug(@" = %d", r); return NO; }
static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$getIsMonitor(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> getIsMonitor]", self); _Bool r = _logos_orig$_ungrouped$MMMonitorConfigMgr$getIsMonitor(self, _cmd); HBLogDebug(@" = %d", r); return NO; }
static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$isIPXXExpired(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> isIPXXExpired]", self); _Bool r = _logos_orig$_ungrouped$MMMonitorConfigMgr$isIPXXExpired(self, _cmd); HBLogDebug(@" = %d", r); return r; }
static void _logos_method$_ungrouped$MMMonitorConfigMgr$onStategy$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> onStategy:%@]", self, arg1); _logos_orig$_ungrouped$MMMonitorConfigMgr$onStategy$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$MMMonitorConfigMgr$onIPXX$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> onIPXX:%@]", self, arg1); _logos_orig$_ungrouped$MMMonitorConfigMgr$onIPXX$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$MMMonitorConfigMgr$onIPXXReportBlockDump$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> onIPXXReportBlockDump:%@]", self, arg1); _logos_orig$_ungrouped$MMMonitorConfigMgr$onIPXXReportBlockDump$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$MMMonitorConfigMgr$onIPXXStrategy$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> onIPXXStrategy:%@]", self, arg1); _logos_orig$_ungrouped$MMMonitorConfigMgr$onIPXXStrategy$(self, _cmd, arg1); }
static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$parseCommonNode$toConfig$(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd, struct XmlReaderNode_t * arg1, id arg2) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> parseCommonNode:%p toConfig:%@]", self, arg1, arg2); _Bool r = _logos_orig$_ungrouped$MMMonitorConfigMgr$parseCommonNode$toConfig$(self, _cmd, arg1, arg2); HBLogDebug(@" = %d", r); return r; }
static id _logos_method$_ungrouped$MMMonitorConfigMgr$getConfigFilePath(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> getConfigFilePath]", self); id r = _logos_orig$_ungrouped$MMMonitorConfigMgr$getConfigFilePath(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$MMMonitorConfigMgr$saveDumpReportConfig(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> saveDumpReportConfig]", self); _logos_orig$_ungrouped$MMMonitorConfigMgr$saveDumpReportConfig(self, _cmd); }
static _Bool _logos_method$_ungrouped$MMMonitorConfigMgr$updateAlreadyUploadCnt(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> updateAlreadyUploadCnt]", self); _Bool r = _logos_orig$_ungrouped$MMMonitorConfigMgr$updateAlreadyUploadCnt(self, _cmd); HBLogDebug(@" = %d", r); return r; }
static void _logos_method$_ungrouped$MMMonitorConfigMgr$loadConfig(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> loadConfig]", self); _logos_orig$_ungrouped$MMMonitorConfigMgr$loadConfig(self, _cmd); }
static void _logos_method$_ungrouped$MMMonitorConfigMgr$onTimeCheck(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> onTimeCheck]", self); _logos_orig$_ungrouped$MMMonitorConfigMgr$onTimeCheck(self, _cmd); }
static void _logos_method$_ungrouped$MMMonitorConfigMgr$onServiceInit(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> onServiceInit]", self); _logos_orig$_ungrouped$MMMonitorConfigMgr$onServiceInit(self, _cmd); }
static void _logos_method$_ungrouped$MMMonitorConfigMgr$dealloc(_LOGOS_SELF_TYPE_NORMAL MMMonitorConfigMgr* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> dealloc]", self); _logos_orig$_ungrouped$MMMonitorConfigMgr$dealloc(self, _cmd); }
static MMMonitorConfigMgr* _logos_method$_ungrouped$MMMonitorConfigMgr$init(_LOGOS_SELF_TYPE_INIT MMMonitorConfigMgr* self, SEL _cmd) _LOGOS_RETURN_RETAINED { HBLogDebug(@"-[<MMMonitorConfigMgr: %p> init]", self); id r = _logos_orig$_ungrouped$MMMonitorConfigMgr$init(self, _cmd); HBLogDebug(@" = %@", r); return r; }


static __attribute__((constructor)) void _logosLocalCtor_5c1794ff(int argc, char **argv, char **envp) {
    if (checkPluginCanUse()){
        {Class _logos_class$_ungrouped$MMMonitorConfigMgr = objc_getClass("MMMonitorConfigMgr"); if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(onReceiveStrategy:withContene:), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$onReceiveStrategy$withContene$, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$onReceiveStrategy$withContene$);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(saveIsMonitorState:), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$saveIsMonitorState$, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$saveIsMonitorState$);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(saveAlreadyUploadCnt:), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$saveAlreadyUploadCnt$, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$saveAlreadyUploadCnt$);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(getAlreadyUploadCnt), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$getAlreadyUploadCnt, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$getAlreadyUploadCnt);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(getReportEnv), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$getReportEnv, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$getReportEnv);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(getOneTimeUpload), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$getOneTimeUpload, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$getOneTimeUpload);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(getMaxDailyReport), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$getMaxDailyReport, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$getMaxDailyReport);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(getIsAutoReport), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$getIsAutoReport, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$getIsAutoReport);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(getIsMonitor), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$getIsMonitor, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$getIsMonitor);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(isIPXXExpired), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$isIPXXExpired, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$isIPXXExpired);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(onStategy:), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$onStategy$, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$onStategy$);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(onIPXX:), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$onIPXX$, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$onIPXX$);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(onIPXXReportBlockDump:), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$onIPXXReportBlockDump$, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$onIPXXReportBlockDump$);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(onIPXXStrategy:), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$onIPXXStrategy$, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$onIPXXStrategy$);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(parseCommonNode:toConfig:), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$parseCommonNode$toConfig$, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$parseCommonNode$toConfig$);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(getConfigFilePath), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$getConfigFilePath, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$getConfigFilePath);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(saveDumpReportConfig), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$saveDumpReportConfig, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$saveDumpReportConfig);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(updateAlreadyUploadCnt), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$updateAlreadyUploadCnt, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$updateAlreadyUploadCnt);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(loadConfig), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$loadConfig, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$loadConfig);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(onTimeCheck), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$onTimeCheck, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$onTimeCheck);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(onServiceInit), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$onServiceInit, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$onServiceInit);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, sel_registerName("dealloc"), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$dealloc, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$dealloc);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}if (_logos_class$_ungrouped$MMMonitorConfigMgr) {MSHookMessageEx(_logos_class$_ungrouped$MMMonitorConfigMgr, @selector(init), (IMP)&_logos_method$_ungrouped$MMMonitorConfigMgr$init, (IMP*)&_logos_orig$_ungrouped$MMMonitorConfigMgr$init);} else {HBLogError(@"logos: nil class %s", "MMMonitorConfigMgr");}}
    }
    
}
