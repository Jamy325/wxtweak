#line 1 "/Users/jamy/works/wxtweak/wxtweak/CMainControll.xm"
#if defined(__clang__)
#if __has_feature(objc_arc)
#define _LOGOS_SELF_TYPE_NORMAL __unsafe_unretained
#define _LOGOS_SELF_TYPE_INIT __attribute__((ns_consumed))
#define _LOGOS_SELF_CONST const
#define _LOGOS_RETURN_RETAINED __attribute__((ns_returns_retained))
#else
#define _LOGOS_SELF_TYPE_NORMAL
#define _LOGOS_SELF_TYPE_INIT
#define _LOGOS_SELF_CONST
#define _LOGOS_RETURN_RETAINED
#endif
#else
#define _LOGOS_SELF_TYPE_NORMAL
#define _LOGOS_SELF_TYPE_INIT
#define _LOGOS_SELF_CONST
#define _LOGOS_RETURN_RETAINED
#endif

#include <substrate.h>
@class CMainControll; 
static void (*_logos_orig$_ungrouped$CMainControll$setM_tLastLongConnDisconnect$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSDate *); static void _logos_method$_ungrouped$CMainControll$setM_tLastLongConnDisconnect$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSDate *); static NSDate * (*_logos_orig$_ungrouped$CMainControll$m_tLastLongConnDisconnect)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSDate * _logos_method$_ungrouped$CMainControll$m_tLastLongConnDisconnect(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$setM_tLastNotify$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSDate *); static void _logos_method$_ungrouped$CMainControll$setM_tLastNotify$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSDate *); static NSDate * (*_logos_orig$_ungrouped$CMainControll$m_tLastNotify)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSDate * _logos_method$_ungrouped$CMainControll$m_tLastNotify(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$setM_statusMessage$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSMutableString *); static void _logos_method$_ungrouped$CMainControll$setM_statusMessage$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSMutableString *); static NSMutableString * (*_logos_orig$_ungrouped$CMainControll$m_statusMessage)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSMutableString * _logos_method$_ungrouped$CMainControll$m_statusMessage(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$setM_didTraceRouteFail$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, _Bool ); static void _logos_method$_ungrouped$CMainControll$setM_didTraceRouteFail$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, _Bool ); static _Bool (*_logos_orig$_ungrouped$CMainControll$m_didTraceRouteFail)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$CMainControll$m_didTraceRouteFail(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$setM_oLock$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSRecursiveLock *); static void _logos_method$_ungrouped$CMainControll$setM_oLock$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSRecursiveLock *); static NSRecursiveLock * (*_logos_orig$_ungrouped$CMainControll$m_oLock)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSRecursiveLock * _logos_method$_ungrouped$CMainControll$m_oLock(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$setM_nsDocPath$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$CMainControll$setM_nsDocPath$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$CMainControll$m_nsDocPath)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$CMainControll$m_nsDocPath(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$setM_dtLastGetUpdateInfo$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSDate *); static void _logos_method$_ungrouped$CMainControll$setM_dtLastGetUpdateInfo$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSDate *); static NSDate * (*_logos_orig$_ungrouped$CMainControll$m_dtLastGetUpdateInfo)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSDate * _logos_method$_ungrouped$CMainControll$m_dtLastGetUpdateInfo(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSDate * (*_logos_orig$_ungrouped$CMainControll$m_dtLastSyncForAuth)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSDate * _logos_method$_ungrouped$CMainControll$m_dtLastSyncForAuth(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$setM_dtLastSyncSend$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSDate *); static void _logos_method$_ungrouped$CMainControll$setM_dtLastSyncSend$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSDate *); static NSDate * (*_logos_orig$_ungrouped$CMainControll$m_dtLastSyncSend)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSDate * _logos_method$_ungrouped$CMainControll$m_dtLastSyncSend(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$setM_nsVoipSound$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$CMainControll$setM_nsVoipSound$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$CMainControll$m_nsVoipSound)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$CMainControll$m_nsVoipSound(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$setM_nsSound$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$CMainControll$setM_nsSound$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$CMainControll$m_nsSound)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$CMainControll$m_nsSound(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$setM_uiTokenStatus$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, unsigned int ); static void _logos_method$_ungrouped$CMainControll$setM_uiTokenStatus$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, unsigned int ); static unsigned int (*_logos_orig$_ungrouped$CMainControll$m_uiTokenStatus)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static unsigned int _logos_method$_ungrouped$CMainControll$m_uiTokenStatus(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$setM_nsToken$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$CMainControll$setM_nsToken$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$CMainControll$m_nsToken)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$CMainControll$m_nsToken(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$didTrancerouteEnd)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$didTrancerouteEnd(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$tracerouteExecutor$startedPingingWithTTL$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, id); static void _logos_method$_ungrouped$CMainControll$tracerouteExecutor$startedPingingWithTTL$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, id); static void (*_logos_orig$_ungrouped$CMainControll$tracerouteExecutor$traceRouteStepDone$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, id); static void _logos_method$_ungrouped$CMainControll$tracerouteExecutor$traceRouteStepDone$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, id); static void (*_logos_orig$_ungrouped$CMainControll$tracerouteExecutor$tracerouteFailed$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, id); static void _logos_method$_ungrouped$CMainControll$tracerouteExecutor$tracerouteFailed$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, id); static void (*_logos_orig$_ungrouped$CMainControll$tracerouteExecutor$endedTracerouteWithSteps$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, id); static void _logos_method$_ungrouped$CMainControll$tracerouteExecutor$endedTracerouteWithSteps$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, id); static void (*_logos_orig$_ungrouped$CMainControll$startTracerouteWithIpAddress$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, const char *); static void _logos_method$_ungrouped$CMainControll$startTracerouteWithIpAddress$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, const char *); static void (*_logos_orig$_ungrouped$CMainControll$ReportApnsSetting$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, _Bool); static void _logos_method$_ungrouped$CMainControll$ReportApnsSetting$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, _Bool); static void (*_logos_orig$_ungrouped$CMainControll$TimerSync)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$TimerSync(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$onLoginOK)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$onLoginOK(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$onAuthOK)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$onAuthOK(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$MessageReturn$Event$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, unsigned int); static void _logos_method$_ungrouped$CMainControll$MessageReturn$Event$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, unsigned int); static void (*_logos_orig$_ungrouped$CMainControll$HandleRespForGetUpdateInfo$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$CMainControll$HandleRespForGetUpdateInfo$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$CMainControll$CheckUpdate$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$CMainControll$CheckUpdate$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$CMainControll$HandleRespForSendToken$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$CMainControll$HandleRespForSendToken$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$CMainControll$CreateSendTokenEventWithScene$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, unsigned int); static void _logos_method$_ungrouped$CMainControll$CreateSendTokenEventWithScene$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, unsigned int); static void (*_logos_orig$_ungrouped$CMainControll$SendToken$Status$Sound$VoipSound$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, unsigned int, id, id); static void _logos_method$_ungrouped$CMainControll$SendToken$Status$Sound$VoipSound$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, unsigned int, id, id); static void (*_logos_orig$_ungrouped$CMainControll$onKickQuit)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$onKickQuit(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$HandleNewSyncPush$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$CMainControll$HandleNewSyncPush$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$CMainControll$HandleSpecialMessage$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$CMainControll$HandleSpecialMessage$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$CMainControll$speedyDispacthMessage$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$CMainControll$speedyDispacthMessage$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$CMainControll$SpeedyNotifyFromEvent$Message$MessageInfo$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, unsigned int, id); static void _logos_method$_ungrouped$CMainControll$SpeedyNotifyFromEvent$Message$MessageInfo$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, unsigned int, id); static void (*_logos_orig$_ungrouped$CMainControll$NotifyFromEvent$Message$MessageInfo$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, unsigned int, id); static void _logos_method$_ungrouped$CMainControll$NotifyFromEvent$Message$MessageInfo$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id, unsigned int, id); static void (*_logos_orig$_ungrouped$CMainControll$ReachabilityChange$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, unsigned int); static void _logos_method$_ungrouped$CMainControll$ReachabilityChange$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, unsigned int); static void (*_logos_orig$_ungrouped$CMainControll$handleIPXXMessage$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$CMainControll$handleIPXXMessage$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$CMainControll$RaiseEvent$MessageID$MessageInfo$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, unsigned int, unsigned int, id); static void _logos_method$_ungrouped$CMainControll$RaiseEvent$MessageID$MessageInfo$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, unsigned int, unsigned int, id); static id (*_logos_orig$_ungrouped$CMainControll$GetLocalInfo)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static id _logos_method$_ungrouped$CMainControll$GetLocalInfo(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$GetBottleContact)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$GetBottleContact(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static unsigned int (*_logos_orig$_ungrouped$CMainControll$GetNetworkReachabilitySeed)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static unsigned int _logos_method$_ungrouped$CMainControll$GetNetworkReachabilitySeed(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static unsigned int (*_logos_orig$_ungrouped$CMainControll$CheckVersion)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static unsigned int _logos_method$_ungrouped$CMainControll$CheckVersion(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static _Bool (*_logos_orig$_ungrouped$CMainControll$IsNewUser)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$CMainControll$IsNewUser(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$CheckWhatsnew)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$CheckWhatsnew(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$SetShowWhatsnew$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, _Bool); static void _logos_method$_ungrouped$CMainControll$SetShowWhatsnew$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, _Bool); static void (*_logos_orig$_ungrouped$CMainControll$CreateSyncTimer)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$CreateSyncTimer(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$HandleQQChanged)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$HandleQQChanged(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$CheckResend)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$CheckResend(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$SendMsg$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, _Bool); static void _logos_method$_ungrouped$CMainControll$SendMsg$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, _Bool); static _Bool (*_logos_orig$_ungrouped$CMainControll$IsInit)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$CMainControll$IsInit(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static _Bool (*_logos_orig$_ungrouped$CMainControll$IsLogIn)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$CMainControll$IsLogIn(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$ReloadData$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, _Bool); static void _logos_method$_ungrouped$CMainControll$ReloadData$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, _Bool); static void (*_logos_orig$_ungrouped$CMainControll$ReloadServiceData_InMainThread)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$ReloadServiceData_InMainThread(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$ClearData)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$ClearData(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$TimerCheckEvent)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$TimerCheckEvent(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$CheckSyncAddressBook)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$CheckSyncAddressBook(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$HandleAuthAtFirstTime)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$HandleAuthAtFirstTime(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$StopAllEvent)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$StopAllEvent(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$Stop)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$Stop(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static unsigned int (*_logos_orig$_ungrouped$CMainControll$Start$)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static unsigned int _logos_method$_ungrouped$CMainControll$Start$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL, id); static void (*_logos_orig$_ungrouped$CMainControll$LoadLastSvrID)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$LoadLastSvrID(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$CMainControll$dealloc)(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static void _logos_method$_ungrouped$CMainControll$dealloc(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST, SEL); static CMainControll* (*_logos_orig$_ungrouped$CMainControll$init)(_LOGOS_SELF_TYPE_INIT CMainControll*, SEL) _LOGOS_RETURN_RETAINED; static CMainControll* _logos_method$_ungrouped$CMainControll$init(_LOGOS_SELF_TYPE_INIT CMainControll*, SEL) _LOGOS_RETURN_RETAINED; 

#line 1 "/Users/jamy/works/wxtweak/wxtweak/CMainControll.xm"

static void _logos_method$_ungrouped$CMainControll$setM_tLastLongConnDisconnect$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, NSDate * m_tLastLongConnDisconnect) { HBLogDebug(@"-[<CMainControll: %p> setM_tLastLongConnDisconnect:%@]", self, m_tLastLongConnDisconnect); _logos_orig$_ungrouped$CMainControll$setM_tLastLongConnDisconnect$(self, _cmd, m_tLastLongConnDisconnect); }
static NSDate * _logos_method$_ungrouped$CMainControll$m_tLastLongConnDisconnect(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_tLastLongConnDisconnect]", self); NSDate * r = _logos_orig$_ungrouped$CMainControll$m_tLastLongConnDisconnect(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$CMainControll$setM_tLastNotify$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, NSDate * m_tLastNotify) { HBLogDebug(@"-[<CMainControll: %p> setM_tLastNotify:%@]", self, m_tLastNotify); _logos_orig$_ungrouped$CMainControll$setM_tLastNotify$(self, _cmd, m_tLastNotify); }
static NSDate * _logos_method$_ungrouped$CMainControll$m_tLastNotify(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_tLastNotify]", self); NSDate * r = _logos_orig$_ungrouped$CMainControll$m_tLastNotify(self, _cmd); HBLogDebug(@" = %@", r); return r; }

static void _logos_method$_ungrouped$CMainControll$setM_statusMessage$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, NSMutableString * m_statusMessage) { HBLogDebug(@"-[<CMainControll: %p> setM_statusMessage:%@]", self, m_statusMessage); _logos_orig$_ungrouped$CMainControll$setM_statusMessage$(self, _cmd, m_statusMessage); }
static NSMutableString * _logos_method$_ungrouped$CMainControll$m_statusMessage(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_statusMessage]", self); NSMutableString * r = _logos_orig$_ungrouped$CMainControll$m_statusMessage(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$CMainControll$setM_didTraceRouteFail$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, _Bool  m_didTraceRouteFail) { HBLogDebug(@"-[<CMainControll: %p> setM_didTraceRouteFail:%d]", self, m_didTraceRouteFail); _logos_orig$_ungrouped$CMainControll$setM_didTraceRouteFail$(self, _cmd, m_didTraceRouteFail); }
static _Bool _logos_method$_ungrouped$CMainControll$m_didTraceRouteFail(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_didTraceRouteFail]", self); _Bool  r = _logos_orig$_ungrouped$CMainControll$m_didTraceRouteFail(self, _cmd); HBLogDebug(@" = %d", r); return r; }

static void _logos_method$_ungrouped$CMainControll$setM_oLock$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, NSRecursiveLock * m_oLock) { HBLogDebug(@"-[<CMainControll: %p> setM_oLock:%@]", self, m_oLock); _logos_orig$_ungrouped$CMainControll$setM_oLock$(self, _cmd, m_oLock); }
static NSRecursiveLock * _logos_method$_ungrouped$CMainControll$m_oLock(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_oLock]", self); NSRecursiveLock * r = _logos_orig$_ungrouped$CMainControll$m_oLock(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$CMainControll$setM_nsDocPath$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, NSString * m_nsDocPath) { HBLogDebug(@"-[<CMainControll: %p> setM_nsDocPath:%@]", self, m_nsDocPath); _logos_orig$_ungrouped$CMainControll$setM_nsDocPath$(self, _cmd, m_nsDocPath); }
static NSString * _logos_method$_ungrouped$CMainControll$m_nsDocPath(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_nsDocPath]", self); NSString * r = _logos_orig$_ungrouped$CMainControll$m_nsDocPath(self, _cmd); HBLogDebug(@" = %@", r); return r; }

static void _logos_method$_ungrouped$CMainControll$setM_dtLastGetUpdateInfo$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, NSDate * m_dtLastGetUpdateInfo) { HBLogDebug(@"-[<CMainControll: %p> setM_dtLastGetUpdateInfo:%@]", self, m_dtLastGetUpdateInfo); _logos_orig$_ungrouped$CMainControll$setM_dtLastGetUpdateInfo$(self, _cmd, m_dtLastGetUpdateInfo); }
static NSDate * _logos_method$_ungrouped$CMainControll$m_dtLastGetUpdateInfo(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_dtLastGetUpdateInfo]", self); NSDate * r = _logos_orig$_ungrouped$CMainControll$m_dtLastGetUpdateInfo(self, _cmd); HBLogDebug(@" = %@", r); return r; }

static NSDate * _logos_method$_ungrouped$CMainControll$m_dtLastSyncForAuth(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_dtLastSyncForAuth]", self); NSDate * r = _logos_orig$_ungrouped$CMainControll$m_dtLastSyncForAuth(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$CMainControll$setM_dtLastSyncSend$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, NSDate * m_dtLastSyncSend) { HBLogDebug(@"-[<CMainControll: %p> setM_dtLastSyncSend:%@]", self, m_dtLastSyncSend); _logos_orig$_ungrouped$CMainControll$setM_dtLastSyncSend$(self, _cmd, m_dtLastSyncSend); }
static NSDate * _logos_method$_ungrouped$CMainControll$m_dtLastSyncSend(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_dtLastSyncSend]", self); NSDate * r = _logos_orig$_ungrouped$CMainControll$m_dtLastSyncSend(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$CMainControll$setM_nsVoipSound$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, NSString * m_nsVoipSound) { HBLogDebug(@"-[<CMainControll: %p> setM_nsVoipSound:%@]", self, m_nsVoipSound); _logos_orig$_ungrouped$CMainControll$setM_nsVoipSound$(self, _cmd, m_nsVoipSound); }
static NSString * _logos_method$_ungrouped$CMainControll$m_nsVoipSound(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_nsVoipSound]", self); NSString * r = _logos_orig$_ungrouped$CMainControll$m_nsVoipSound(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$CMainControll$setM_nsSound$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, NSString * m_nsSound) { HBLogDebug(@"-[<CMainControll: %p> setM_nsSound:%@]", self, m_nsSound); _logos_orig$_ungrouped$CMainControll$setM_nsSound$(self, _cmd, m_nsSound); }
static NSString * _logos_method$_ungrouped$CMainControll$m_nsSound(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_nsSound]", self); NSString * r = _logos_orig$_ungrouped$CMainControll$m_nsSound(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$CMainControll$setM_uiTokenStatus$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, unsigned int  m_uiTokenStatus) { HBLogDebug(@"-[<CMainControll: %p> setM_uiTokenStatus:%u]", self, m_uiTokenStatus); _logos_orig$_ungrouped$CMainControll$setM_uiTokenStatus$(self, _cmd, m_uiTokenStatus); }
static unsigned int _logos_method$_ungrouped$CMainControll$m_uiTokenStatus(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_uiTokenStatus]", self); unsigned int  r = _logos_orig$_ungrouped$CMainControll$m_uiTokenStatus(self, _cmd); HBLogDebug(@" = %u", r); return r; }
static void _logos_method$_ungrouped$CMainControll$setM_nsToken$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, NSString * m_nsToken) { HBLogDebug(@"-[<CMainControll: %p> setM_nsToken:%@]", self, m_nsToken); _logos_orig$_ungrouped$CMainControll$setM_nsToken$(self, _cmd, m_nsToken); }
static NSString * _logos_method$_ungrouped$CMainControll$m_nsToken(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> m_nsToken]", self); NSString * r = _logos_orig$_ungrouped$CMainControll$m_nsToken(self, _cmd); HBLogDebug(@" = %@", r); return r; }

static void _logos_method$_ungrouped$CMainControll$didTrancerouteEnd(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> didTrancerouteEnd]", self); _logos_orig$_ungrouped$CMainControll$didTrancerouteEnd(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$tracerouteExecutor$startedPingingWithTTL$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1, id arg2) { HBLogDebug(@"-[<CMainControll: %p> tracerouteExecutor:%@ startedPingingWithTTL:%@]", self, arg1, arg2); _logos_orig$_ungrouped$CMainControll$tracerouteExecutor$startedPingingWithTTL$(self, _cmd, arg1, arg2); }
static void _logos_method$_ungrouped$CMainControll$tracerouteExecutor$traceRouteStepDone$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1, id arg2) { HBLogDebug(@"-[<CMainControll: %p> tracerouteExecutor:%@ traceRouteStepDone:%@]", self, arg1, arg2); _logos_orig$_ungrouped$CMainControll$tracerouteExecutor$traceRouteStepDone$(self, _cmd, arg1, arg2); }
static void _logos_method$_ungrouped$CMainControll$tracerouteExecutor$tracerouteFailed$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1, id arg2) { HBLogDebug(@"-[<CMainControll: %p> tracerouteExecutor:%@ tracerouteFailed:%@]", self, arg1, arg2); _logos_orig$_ungrouped$CMainControll$tracerouteExecutor$tracerouteFailed$(self, _cmd, arg1, arg2); }
static void _logos_method$_ungrouped$CMainControll$tracerouteExecutor$endedTracerouteWithSteps$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1, id arg2) { HBLogDebug(@"-[<CMainControll: %p> tracerouteExecutor:%@ endedTracerouteWithSteps:%@]", self, arg1, arg2); _logos_orig$_ungrouped$CMainControll$tracerouteExecutor$endedTracerouteWithSteps$(self, _cmd, arg1, arg2); }
static void _logos_method$_ungrouped$CMainControll$startTracerouteWithIpAddress$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, const char * arg1) { HBLogDebug(@"-[<CMainControll: %p> startTracerouteWithIpAddress:0x%x]", self, (unsigned int)arg1); _logos_orig$_ungrouped$CMainControll$startTracerouteWithIpAddress$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$ReportApnsSetting$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, _Bool arg1) { HBLogDebug(@"-[<CMainControll: %p> ReportApnsSetting:%d]", self, arg1); _logos_orig$_ungrouped$CMainControll$ReportApnsSetting$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$TimerSync(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> TimerSync]", self); _logos_orig$_ungrouped$CMainControll$TimerSync(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$onLoginOK(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> onLoginOK]", self); _logos_orig$_ungrouped$CMainControll$onLoginOK(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$onAuthOK(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> onAuthOK]", self); _logos_orig$_ungrouped$CMainControll$onAuthOK(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$MessageReturn$Event$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1, unsigned int arg2) { HBLogDebug(@"-[<CMainControll: %p> MessageReturn:%@ Event:%u]", self, arg1, arg2); _logos_orig$_ungrouped$CMainControll$MessageReturn$Event$(self, _cmd, arg1, arg2); }
static void _logos_method$_ungrouped$CMainControll$HandleRespForGetUpdateInfo$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<CMainControll: %p> HandleRespForGetUpdateInfo:%@]", self, arg1); _logos_orig$_ungrouped$CMainControll$HandleRespForGetUpdateInfo$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$CheckUpdate$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<CMainControll: %p> CheckUpdate:%@]", self, arg1); _logos_orig$_ungrouped$CMainControll$CheckUpdate$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$HandleRespForSendToken$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<CMainControll: %p> HandleRespForSendToken:%@]", self, arg1); _logos_orig$_ungrouped$CMainControll$HandleRespForSendToken$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$CreateSendTokenEventWithScene$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, unsigned int arg1) { HBLogDebug(@"-[<CMainControll: %p> CreateSendTokenEventWithScene:%u]", self, arg1); _logos_orig$_ungrouped$CMainControll$CreateSendTokenEventWithScene$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$SendToken$Status$Sound$VoipSound$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1, unsigned int arg2, id arg3, id arg4) { HBLogDebug(@"-[<CMainControll: %p> SendToken:%@ Status:%u Sound:%@ VoipSound:%@]", self, arg1, arg2, arg3, arg4); _logos_orig$_ungrouped$CMainControll$SendToken$Status$Sound$VoipSound$(self, _cmd, arg1, arg2, arg3, arg4); }
static void _logos_method$_ungrouped$CMainControll$onKickQuit(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> onKickQuit]", self); _logos_orig$_ungrouped$CMainControll$onKickQuit(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$HandleNewSyncPush$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<CMainControll: %p> HandleNewSyncPush:%@]", self, arg1); _logos_orig$_ungrouped$CMainControll$HandleNewSyncPush$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$HandleSpecialMessage$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<CMainControll: %p> HandleSpecialMessage:%@]", self, arg1); _logos_orig$_ungrouped$CMainControll$HandleSpecialMessage$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$speedyDispacthMessage$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<CMainControll: %p> speedyDispacthMessage:%@]", self, arg1); _logos_orig$_ungrouped$CMainControll$speedyDispacthMessage$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$SpeedyNotifyFromEvent$Message$MessageInfo$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1, unsigned int arg2, id arg3) { HBLogDebug(@"-[<CMainControll: %p> SpeedyNotifyFromEvent:%@ Message:%u MessageInfo:%@]", self, arg1, arg2, arg3); _logos_orig$_ungrouped$CMainControll$SpeedyNotifyFromEvent$Message$MessageInfo$(self, _cmd, arg1, arg2, arg3); }
static void _logos_method$_ungrouped$CMainControll$NotifyFromEvent$Message$MessageInfo$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1, unsigned int arg2, id arg3) { HBLogDebug(@"-[<CMainControll: %p> NotifyFromEvent:%@ Message:%u MessageInfo:%@]", self, arg1, arg2, arg3); _logos_orig$_ungrouped$CMainControll$NotifyFromEvent$Message$MessageInfo$(self, _cmd, arg1, arg2, arg3); }
static void _logos_method$_ungrouped$CMainControll$ReachabilityChange$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, unsigned int arg1) { HBLogDebug(@"-[<CMainControll: %p> ReachabilityChange:%u]", self, arg1); _logos_orig$_ungrouped$CMainControll$ReachabilityChange$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$handleIPXXMessage$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<CMainControll: %p> handleIPXXMessage:%@]", self, arg1); _logos_orig$_ungrouped$CMainControll$handleIPXXMessage$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$RaiseEvent$MessageID$MessageInfo$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, unsigned int arg1, unsigned int arg2, id arg3) { HBLogDebug(@"-[<CMainControll: %p> RaiseEvent:%u MessageID:%u MessageInfo:%@]", self, arg1, arg2, arg3); _logos_orig$_ungrouped$CMainControll$RaiseEvent$MessageID$MessageInfo$(self, _cmd, arg1, arg2, arg3); }
static id _logos_method$_ungrouped$CMainControll$GetLocalInfo(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> GetLocalInfo]", self); id r = _logos_orig$_ungrouped$CMainControll$GetLocalInfo(self, _cmd); HBLogDebug(@" = %@", r); return r; }

static void _logos_method$_ungrouped$CMainControll$GetBottleContact(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> GetBottleContact]", self); _logos_orig$_ungrouped$CMainControll$GetBottleContact(self, _cmd); }
static unsigned int _logos_method$_ungrouped$CMainControll$GetNetworkReachabilitySeed(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> GetNetworkReachabilitySeed]", self); unsigned int r = _logos_orig$_ungrouped$CMainControll$GetNetworkReachabilitySeed(self, _cmd); HBLogDebug(@" = %u", r); return r; }
static unsigned int _logos_method$_ungrouped$CMainControll$CheckVersion(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> CheckVersion]", self); unsigned int r = _logos_orig$_ungrouped$CMainControll$CheckVersion(self, _cmd); HBLogDebug(@" = %u", r); return r; }
static _Bool _logos_method$_ungrouped$CMainControll$IsNewUser(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> IsNewUser]", self); _Bool r = _logos_orig$_ungrouped$CMainControll$IsNewUser(self, _cmd); HBLogDebug(@" = %d", r); return r; }
static void _logos_method$_ungrouped$CMainControll$CheckWhatsnew(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> CheckWhatsnew]", self); _logos_orig$_ungrouped$CMainControll$CheckWhatsnew(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$SetShowWhatsnew$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, _Bool arg1) { HBLogDebug(@"-[<CMainControll: %p> SetShowWhatsnew:%d]", self, arg1); _logos_orig$_ungrouped$CMainControll$SetShowWhatsnew$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$CreateSyncTimer(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> CreateSyncTimer]", self); _logos_orig$_ungrouped$CMainControll$CreateSyncTimer(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$HandleQQChanged(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> HandleQQChanged]", self); _logos_orig$_ungrouped$CMainControll$HandleQQChanged(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$CheckResend(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> CheckResend]", self); _logos_orig$_ungrouped$CMainControll$CheckResend(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$SendMsg$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, _Bool arg1) { HBLogDebug(@"-[<CMainControll: %p> SendMsg:%d]", self, arg1); _logos_orig$_ungrouped$CMainControll$SendMsg$(self, _cmd, arg1); }
static _Bool _logos_method$_ungrouped$CMainControll$IsInit(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> IsInit]", self); _Bool r = _logos_orig$_ungrouped$CMainControll$IsInit(self, _cmd); HBLogDebug(@" = %d", r); return r; }
static _Bool _logos_method$_ungrouped$CMainControll$IsLogIn(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> IsLogIn]", self); _Bool r = _logos_orig$_ungrouped$CMainControll$IsLogIn(self, _cmd); HBLogDebug(@" = %d", r); return r; }
static void _logos_method$_ungrouped$CMainControll$ReloadData$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, _Bool arg1) { HBLogDebug(@"-[<CMainControll: %p> ReloadData:%d]", self, arg1); _logos_orig$_ungrouped$CMainControll$ReloadData$(self, _cmd, arg1); }
static void _logos_method$_ungrouped$CMainControll$ReloadServiceData_InMainThread(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> ReloadServiceData_InMainThread]", self); _logos_orig$_ungrouped$CMainControll$ReloadServiceData_InMainThread(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$ClearData(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> ClearData]", self); _logos_orig$_ungrouped$CMainControll$ClearData(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$TimerCheckEvent(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> TimerCheckEvent]", self); _logos_orig$_ungrouped$CMainControll$TimerCheckEvent(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$CheckSyncAddressBook(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> CheckSyncAddressBook]", self); _logos_orig$_ungrouped$CMainControll$CheckSyncAddressBook(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$HandleAuthAtFirstTime(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> HandleAuthAtFirstTime]", self); _logos_orig$_ungrouped$CMainControll$HandleAuthAtFirstTime(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$StopAllEvent(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> StopAllEvent]", self); _logos_orig$_ungrouped$CMainControll$StopAllEvent(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$Stop(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> Stop]", self); _logos_orig$_ungrouped$CMainControll$Stop(self, _cmd); }


static unsigned int _logos_method$_ungrouped$CMainControll$Start$(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) {
    HBLogDebug(@"-[<CMainControll: %p> Start:%@]", self, arg1);
    unsigned int r = _logos_orig$_ungrouped$CMainControll$Start$(self, _cmd, arg1);
    HBLogDebug(@" = %u", r);
    return r;
}

static void _logos_method$_ungrouped$CMainControll$LoadLastSvrID(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> LoadLastSvrID]", self); _logos_orig$_ungrouped$CMainControll$LoadLastSvrID(self, _cmd); }
static void _logos_method$_ungrouped$CMainControll$dealloc(_LOGOS_SELF_TYPE_NORMAL CMainControll* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<CMainControll: %p> dealloc]", self); _logos_orig$_ungrouped$CMainControll$dealloc(self, _cmd); }
static CMainControll* _logos_method$_ungrouped$CMainControll$init(_LOGOS_SELF_TYPE_INIT CMainControll* self, SEL _cmd) _LOGOS_RETURN_RETAINED { HBLogDebug(@"-[<CMainControll: %p> init]", self); id r = _logos_orig$_ungrouped$CMainControll$init(self, _cmd); HBLogDebug(@" = %@", r); return r; }

static __attribute__((constructor)) void _logosLocalInit() {
{Class _logos_class$_ungrouped$CMainControll = objc_getClass("CMainControll"); if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_tLastLongConnDisconnect:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_tLastLongConnDisconnect$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_tLastLongConnDisconnect$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_tLastLongConnDisconnect), (IMP)&_logos_method$_ungrouped$CMainControll$m_tLastLongConnDisconnect, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_tLastLongConnDisconnect);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_tLastNotify:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_tLastNotify$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_tLastNotify$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_tLastNotify), (IMP)&_logos_method$_ungrouped$CMainControll$m_tLastNotify, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_tLastNotify);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_statusMessage:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_statusMessage$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_statusMessage$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_statusMessage), (IMP)&_logos_method$_ungrouped$CMainControll$m_statusMessage, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_statusMessage);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_didTraceRouteFail:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_didTraceRouteFail$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_didTraceRouteFail$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_didTraceRouteFail), (IMP)&_logos_method$_ungrouped$CMainControll$m_didTraceRouteFail, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_didTraceRouteFail);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_oLock:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_oLock$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_oLock$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_oLock), (IMP)&_logos_method$_ungrouped$CMainControll$m_oLock, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_oLock);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_nsDocPath:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_nsDocPath$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_nsDocPath$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_nsDocPath), (IMP)&_logos_method$_ungrouped$CMainControll$m_nsDocPath, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_nsDocPath);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_dtLastGetUpdateInfo:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_dtLastGetUpdateInfo$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_dtLastGetUpdateInfo$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_dtLastGetUpdateInfo), (IMP)&_logos_method$_ungrouped$CMainControll$m_dtLastGetUpdateInfo, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_dtLastGetUpdateInfo);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_dtLastSyncForAuth), (IMP)&_logos_method$_ungrouped$CMainControll$m_dtLastSyncForAuth, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_dtLastSyncForAuth);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_dtLastSyncSend:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_dtLastSyncSend$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_dtLastSyncSend$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_dtLastSyncSend), (IMP)&_logos_method$_ungrouped$CMainControll$m_dtLastSyncSend, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_dtLastSyncSend);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_nsVoipSound:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_nsVoipSound$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_nsVoipSound$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_nsVoipSound), (IMP)&_logos_method$_ungrouped$CMainControll$m_nsVoipSound, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_nsVoipSound);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_nsSound:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_nsSound$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_nsSound$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_nsSound), (IMP)&_logos_method$_ungrouped$CMainControll$m_nsSound, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_nsSound);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_uiTokenStatus:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_uiTokenStatus$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_uiTokenStatus$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_uiTokenStatus), (IMP)&_logos_method$_ungrouped$CMainControll$m_uiTokenStatus, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_uiTokenStatus);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(setM_nsToken:), (IMP)&_logos_method$_ungrouped$CMainControll$setM_nsToken$, (IMP*)&_logos_orig$_ungrouped$CMainControll$setM_nsToken$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(m_nsToken), (IMP)&_logos_method$_ungrouped$CMainControll$m_nsToken, (IMP*)&_logos_orig$_ungrouped$CMainControll$m_nsToken);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(didTrancerouteEnd), (IMP)&_logos_method$_ungrouped$CMainControll$didTrancerouteEnd, (IMP*)&_logos_orig$_ungrouped$CMainControll$didTrancerouteEnd);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(tracerouteExecutor:startedPingingWithTTL:), (IMP)&_logos_method$_ungrouped$CMainControll$tracerouteExecutor$startedPingingWithTTL$, (IMP*)&_logos_orig$_ungrouped$CMainControll$tracerouteExecutor$startedPingingWithTTL$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(tracerouteExecutor:traceRouteStepDone:), (IMP)&_logos_method$_ungrouped$CMainControll$tracerouteExecutor$traceRouteStepDone$, (IMP*)&_logos_orig$_ungrouped$CMainControll$tracerouteExecutor$traceRouteStepDone$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(tracerouteExecutor:tracerouteFailed:), (IMP)&_logos_method$_ungrouped$CMainControll$tracerouteExecutor$tracerouteFailed$, (IMP*)&_logos_orig$_ungrouped$CMainControll$tracerouteExecutor$tracerouteFailed$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(tracerouteExecutor:endedTracerouteWithSteps:), (IMP)&_logos_method$_ungrouped$CMainControll$tracerouteExecutor$endedTracerouteWithSteps$, (IMP*)&_logos_orig$_ungrouped$CMainControll$tracerouteExecutor$endedTracerouteWithSteps$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(startTracerouteWithIpAddress:), (IMP)&_logos_method$_ungrouped$CMainControll$startTracerouteWithIpAddress$, (IMP*)&_logos_orig$_ungrouped$CMainControll$startTracerouteWithIpAddress$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(ReportApnsSetting:), (IMP)&_logos_method$_ungrouped$CMainControll$ReportApnsSetting$, (IMP*)&_logos_orig$_ungrouped$CMainControll$ReportApnsSetting$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(TimerSync), (IMP)&_logos_method$_ungrouped$CMainControll$TimerSync, (IMP*)&_logos_orig$_ungrouped$CMainControll$TimerSync);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(onLoginOK), (IMP)&_logos_method$_ungrouped$CMainControll$onLoginOK, (IMP*)&_logos_orig$_ungrouped$CMainControll$onLoginOK);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(onAuthOK), (IMP)&_logos_method$_ungrouped$CMainControll$onAuthOK, (IMP*)&_logos_orig$_ungrouped$CMainControll$onAuthOK);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(MessageReturn:Event:), (IMP)&_logos_method$_ungrouped$CMainControll$MessageReturn$Event$, (IMP*)&_logos_orig$_ungrouped$CMainControll$MessageReturn$Event$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(HandleRespForGetUpdateInfo:), (IMP)&_logos_method$_ungrouped$CMainControll$HandleRespForGetUpdateInfo$, (IMP*)&_logos_orig$_ungrouped$CMainControll$HandleRespForGetUpdateInfo$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(CheckUpdate:), (IMP)&_logos_method$_ungrouped$CMainControll$CheckUpdate$, (IMP*)&_logos_orig$_ungrouped$CMainControll$CheckUpdate$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(HandleRespForSendToken:), (IMP)&_logos_method$_ungrouped$CMainControll$HandleRespForSendToken$, (IMP*)&_logos_orig$_ungrouped$CMainControll$HandleRespForSendToken$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(CreateSendTokenEventWithScene:), (IMP)&_logos_method$_ungrouped$CMainControll$CreateSendTokenEventWithScene$, (IMP*)&_logos_orig$_ungrouped$CMainControll$CreateSendTokenEventWithScene$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(SendToken:Status:Sound:VoipSound:), (IMP)&_logos_method$_ungrouped$CMainControll$SendToken$Status$Sound$VoipSound$, (IMP*)&_logos_orig$_ungrouped$CMainControll$SendToken$Status$Sound$VoipSound$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(onKickQuit), (IMP)&_logos_method$_ungrouped$CMainControll$onKickQuit, (IMP*)&_logos_orig$_ungrouped$CMainControll$onKickQuit);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(HandleNewSyncPush:), (IMP)&_logos_method$_ungrouped$CMainControll$HandleNewSyncPush$, (IMP*)&_logos_orig$_ungrouped$CMainControll$HandleNewSyncPush$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(HandleSpecialMessage:), (IMP)&_logos_method$_ungrouped$CMainControll$HandleSpecialMessage$, (IMP*)&_logos_orig$_ungrouped$CMainControll$HandleSpecialMessage$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(speedyDispacthMessage:), (IMP)&_logos_method$_ungrouped$CMainControll$speedyDispacthMessage$, (IMP*)&_logos_orig$_ungrouped$CMainControll$speedyDispacthMessage$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(SpeedyNotifyFromEvent:Message:MessageInfo:), (IMP)&_logos_method$_ungrouped$CMainControll$SpeedyNotifyFromEvent$Message$MessageInfo$, (IMP*)&_logos_orig$_ungrouped$CMainControll$SpeedyNotifyFromEvent$Message$MessageInfo$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(NotifyFromEvent:Message:MessageInfo:), (IMP)&_logos_method$_ungrouped$CMainControll$NotifyFromEvent$Message$MessageInfo$, (IMP*)&_logos_orig$_ungrouped$CMainControll$NotifyFromEvent$Message$MessageInfo$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(ReachabilityChange:), (IMP)&_logos_method$_ungrouped$CMainControll$ReachabilityChange$, (IMP*)&_logos_orig$_ungrouped$CMainControll$ReachabilityChange$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(handleIPXXMessage:), (IMP)&_logos_method$_ungrouped$CMainControll$handleIPXXMessage$, (IMP*)&_logos_orig$_ungrouped$CMainControll$handleIPXXMessage$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(RaiseEvent:MessageID:MessageInfo:), (IMP)&_logos_method$_ungrouped$CMainControll$RaiseEvent$MessageID$MessageInfo$, (IMP*)&_logos_orig$_ungrouped$CMainControll$RaiseEvent$MessageID$MessageInfo$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(GetLocalInfo), (IMP)&_logos_method$_ungrouped$CMainControll$GetLocalInfo, (IMP*)&_logos_orig$_ungrouped$CMainControll$GetLocalInfo);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(GetBottleContact), (IMP)&_logos_method$_ungrouped$CMainControll$GetBottleContact, (IMP*)&_logos_orig$_ungrouped$CMainControll$GetBottleContact);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(GetNetworkReachabilitySeed), (IMP)&_logos_method$_ungrouped$CMainControll$GetNetworkReachabilitySeed, (IMP*)&_logos_orig$_ungrouped$CMainControll$GetNetworkReachabilitySeed);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(CheckVersion), (IMP)&_logos_method$_ungrouped$CMainControll$CheckVersion, (IMP*)&_logos_orig$_ungrouped$CMainControll$CheckVersion);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(IsNewUser), (IMP)&_logos_method$_ungrouped$CMainControll$IsNewUser, (IMP*)&_logos_orig$_ungrouped$CMainControll$IsNewUser);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(CheckWhatsnew), (IMP)&_logos_method$_ungrouped$CMainControll$CheckWhatsnew, (IMP*)&_logos_orig$_ungrouped$CMainControll$CheckWhatsnew);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(SetShowWhatsnew:), (IMP)&_logos_method$_ungrouped$CMainControll$SetShowWhatsnew$, (IMP*)&_logos_orig$_ungrouped$CMainControll$SetShowWhatsnew$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(CreateSyncTimer), (IMP)&_logos_method$_ungrouped$CMainControll$CreateSyncTimer, (IMP*)&_logos_orig$_ungrouped$CMainControll$CreateSyncTimer);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(HandleQQChanged), (IMP)&_logos_method$_ungrouped$CMainControll$HandleQQChanged, (IMP*)&_logos_orig$_ungrouped$CMainControll$HandleQQChanged);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(CheckResend), (IMP)&_logos_method$_ungrouped$CMainControll$CheckResend, (IMP*)&_logos_orig$_ungrouped$CMainControll$CheckResend);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(SendMsg:), (IMP)&_logos_method$_ungrouped$CMainControll$SendMsg$, (IMP*)&_logos_orig$_ungrouped$CMainControll$SendMsg$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(IsInit), (IMP)&_logos_method$_ungrouped$CMainControll$IsInit, (IMP*)&_logos_orig$_ungrouped$CMainControll$IsInit);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(IsLogIn), (IMP)&_logos_method$_ungrouped$CMainControll$IsLogIn, (IMP*)&_logos_orig$_ungrouped$CMainControll$IsLogIn);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(ReloadData:), (IMP)&_logos_method$_ungrouped$CMainControll$ReloadData$, (IMP*)&_logos_orig$_ungrouped$CMainControll$ReloadData$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(ReloadServiceData_InMainThread), (IMP)&_logos_method$_ungrouped$CMainControll$ReloadServiceData_InMainThread, (IMP*)&_logos_orig$_ungrouped$CMainControll$ReloadServiceData_InMainThread);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(ClearData), (IMP)&_logos_method$_ungrouped$CMainControll$ClearData, (IMP*)&_logos_orig$_ungrouped$CMainControll$ClearData);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(TimerCheckEvent), (IMP)&_logos_method$_ungrouped$CMainControll$TimerCheckEvent, (IMP*)&_logos_orig$_ungrouped$CMainControll$TimerCheckEvent);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(CheckSyncAddressBook), (IMP)&_logos_method$_ungrouped$CMainControll$CheckSyncAddressBook, (IMP*)&_logos_orig$_ungrouped$CMainControll$CheckSyncAddressBook);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(HandleAuthAtFirstTime), (IMP)&_logos_method$_ungrouped$CMainControll$HandleAuthAtFirstTime, (IMP*)&_logos_orig$_ungrouped$CMainControll$HandleAuthAtFirstTime);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(StopAllEvent), (IMP)&_logos_method$_ungrouped$CMainControll$StopAllEvent, (IMP*)&_logos_orig$_ungrouped$CMainControll$StopAllEvent);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(Stop), (IMP)&_logos_method$_ungrouped$CMainControll$Stop, (IMP*)&_logos_orig$_ungrouped$CMainControll$Stop);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(Start:), (IMP)&_logos_method$_ungrouped$CMainControll$Start$, (IMP*)&_logos_orig$_ungrouped$CMainControll$Start$);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(LoadLastSvrID), (IMP)&_logos_method$_ungrouped$CMainControll$LoadLastSvrID, (IMP*)&_logos_orig$_ungrouped$CMainControll$LoadLastSvrID);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, sel_registerName("dealloc"), (IMP)&_logos_method$_ungrouped$CMainControll$dealloc, (IMP*)&_logos_orig$_ungrouped$CMainControll$dealloc);} else {HBLogError(@"logos: nil class %s", "CMainControll");}if (_logos_class$_ungrouped$CMainControll) {MSHookMessageEx(_logos_class$_ungrouped$CMainControll, @selector(init), (IMP)&_logos_method$_ungrouped$CMainControll$init, (IMP*)&_logos_orig$_ungrouped$CMainControll$init);} else {HBLogError(@"logos: nil class %s", "CMainControll");}} }
#line 92 "/Users/jamy/works/wxtweak/wxtweak/CMainControll.xm"
