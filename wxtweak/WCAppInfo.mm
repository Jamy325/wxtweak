#line 1 "/Users/jamy/works/wxtweak/wxtweak/WCAppInfo.xm"
#include "wxUtil.h"


#if defined(__clang__)
#if __has_feature(objc_arc)
#define _LOGOS_SELF_TYPE_NORMAL __unsafe_unretained
#define _LOGOS_SELF_TYPE_INIT __attribute__((ns_consumed))
#define _LOGOS_SELF_CONST const
#define _LOGOS_RETURN_RETAINED __attribute__((ns_returns_retained))
#else
#define _LOGOS_SELF_TYPE_NORMAL
#define _LOGOS_SELF_TYPE_INIT
#define _LOGOS_SELF_CONST
#define _LOGOS_RETURN_RETAINED
#endif
#else
#define _LOGOS_SELF_TYPE_NORMAL
#define _LOGOS_SELF_TYPE_INIT
#define _LOGOS_SELF_CONST
#define _LOGOS_RETURN_RETAINED
#endif

#include <substrate.h>
@class WCAppInfo; 
static void (*_logos_orig$_ungrouped$WCAppInfo$setIsForceUpdate$)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, _Bool ); static void _logos_method$_ungrouped$WCAppInfo$setIsForceUpdate$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, _Bool ); static _Bool (*_logos_orig$_ungrouped$WCAppInfo$isForceUpdate)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$WCAppInfo$isForceUpdate(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$WCAppInfo$setFromUrl$)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$WCAppInfo$setFromUrl$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$WCAppInfo$fromUrl)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$WCAppInfo$fromUrl(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$WCAppInfo$setInstallUrl$)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$WCAppInfo$setInstallUrl$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$WCAppInfo$installUrl)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$WCAppInfo$installUrl(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$WCAppInfo$setVersion$)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$WCAppInfo$setVersion$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$WCAppInfo$version)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$WCAppInfo$version(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$WCAppInfo$setAppName$)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$WCAppInfo$setAppName$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$WCAppInfo$appName)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$WCAppInfo$appName(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static void (*_logos_orig$_ungrouped$WCAppInfo$setAppID$)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, NSString *); static void _logos_method$_ungrouped$WCAppInfo$setAppID$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, NSString *); static NSString * (*_logos_orig$_ungrouped$WCAppInfo$appID)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static NSString * _logos_method$_ungrouped$WCAppInfo$appID(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static _Bool (*_logos_orig$_ungrouped$WCAppInfo$isValid)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static _Bool _logos_method$_ungrouped$WCAppInfo$isValid(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL); static WCAppInfo* (*_logos_orig$_ungrouped$WCAppInfo$initWithCoder$)(_LOGOS_SELF_TYPE_INIT WCAppInfo*, SEL, id) _LOGOS_RETURN_RETAINED; static WCAppInfo* _logos_method$_ungrouped$WCAppInfo$initWithCoder$(_LOGOS_SELF_TYPE_INIT WCAppInfo*, SEL, id) _LOGOS_RETURN_RETAINED; static void (*_logos_orig$_ungrouped$WCAppInfo$encodeWithCoder$)(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, id); static void _logos_method$_ungrouped$WCAppInfo$encodeWithCoder$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST, SEL, id); static WCAppInfo* (*_logos_orig$_ungrouped$WCAppInfo$init)(_LOGOS_SELF_TYPE_INIT WCAppInfo*, SEL) _LOGOS_RETURN_RETAINED; static WCAppInfo* _logos_method$_ungrouped$WCAppInfo$init(_LOGOS_SELF_TYPE_INIT WCAppInfo*, SEL) _LOGOS_RETURN_RETAINED; 

#line 4 "/Users/jamy/works/wxtweak/wxtweak/WCAppInfo.xm"

static void _logos_method$_ungrouped$WCAppInfo$setIsForceUpdate$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd, _Bool  isForceUpdate) { HBLogDebug(@"-[<WCAppInfo: %p> setIsForceUpdate:%d]", self, isForceUpdate); _logos_orig$_ungrouped$WCAppInfo$setIsForceUpdate$(self, _cmd, isForceUpdate); }
static _Bool _logos_method$_ungrouped$WCAppInfo$isForceUpdate(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<WCAppInfo: %p> isForceUpdate]", self); _Bool  r = _logos_orig$_ungrouped$WCAppInfo$isForceUpdate(self, _cmd); HBLogDebug(@" = %d", r); return r; }
static void _logos_method$_ungrouped$WCAppInfo$setFromUrl$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd, NSString * fromUrl) { HBLogDebug(@"-[<WCAppInfo: %p> setFromUrl:%@]", self, fromUrl); _logos_orig$_ungrouped$WCAppInfo$setFromUrl$(self, _cmd, fromUrl); }
static NSString * _logos_method$_ungrouped$WCAppInfo$fromUrl(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<WCAppInfo: %p> fromUrl]", self); NSString * r = _logos_orig$_ungrouped$WCAppInfo$fromUrl(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$WCAppInfo$setInstallUrl$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd, NSString * installUrl) { HBLogDebug(@"-[<WCAppInfo: %p> setInstallUrl:%@]", self, installUrl); _logos_orig$_ungrouped$WCAppInfo$setInstallUrl$(self, _cmd, installUrl); }
static NSString * _logos_method$_ungrouped$WCAppInfo$installUrl(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<WCAppInfo: %p> installUrl]", self); NSString * r = _logos_orig$_ungrouped$WCAppInfo$installUrl(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$WCAppInfo$setVersion$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd, NSString * version) { HBLogDebug(@"-[<WCAppInfo: %p> setVersion:%@]", self, version); _logos_orig$_ungrouped$WCAppInfo$setVersion$(self, _cmd, version); }
static NSString * _logos_method$_ungrouped$WCAppInfo$version(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<WCAppInfo: %p> version]", self); NSString * r = _logos_orig$_ungrouped$WCAppInfo$version(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$WCAppInfo$setAppName$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd, NSString * appName) { HBLogDebug(@"-[<WCAppInfo: %p> setAppName:%@]", self, appName); _logos_orig$_ungrouped$WCAppInfo$setAppName$(self, _cmd, appName); }
static NSString * _logos_method$_ungrouped$WCAppInfo$appName(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<WCAppInfo: %p> appName]", self); NSString * r = _logos_orig$_ungrouped$WCAppInfo$appName(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$WCAppInfo$setAppID$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd, NSString * appID) { HBLogDebug(@"-[<WCAppInfo: %p> setAppID:%@]", self, appID); _logos_orig$_ungrouped$WCAppInfo$setAppID$(self, _cmd, appID); }
static NSString * _logos_method$_ungrouped$WCAppInfo$appID(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<WCAppInfo: %p> appID]", self); NSString * r = _logos_orig$_ungrouped$WCAppInfo$appID(self, _cmd); HBLogDebug(@" = %@", r); return r; }
static _Bool _logos_method$_ungrouped$WCAppInfo$isValid(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd) { HBLogDebug(@"-[<WCAppInfo: %p> isValid]", self); _Bool r = _logos_orig$_ungrouped$WCAppInfo$isValid(self, _cmd); HBLogDebug(@" = %d", r); return r; }
static WCAppInfo* _logos_method$_ungrouped$WCAppInfo$initWithCoder$(_LOGOS_SELF_TYPE_INIT WCAppInfo* self, SEL _cmd, id arg1) _LOGOS_RETURN_RETAINED { HBLogDebug(@"-[<WCAppInfo: %p> initWithCoder:%@]", self, arg1); id r = _logos_orig$_ungrouped$WCAppInfo$initWithCoder$(self, _cmd, arg1); HBLogDebug(@" = %@", r); return r; }
static void _logos_method$_ungrouped$WCAppInfo$encodeWithCoder$(_LOGOS_SELF_TYPE_NORMAL WCAppInfo* _LOGOS_SELF_CONST self, SEL _cmd, id arg1) { HBLogDebug(@"-[<WCAppInfo: %p> encodeWithCoder:%@]", self, arg1); _logos_orig$_ungrouped$WCAppInfo$encodeWithCoder$(self, _cmd, arg1); }
static WCAppInfo* _logos_method$_ungrouped$WCAppInfo$init(_LOGOS_SELF_TYPE_INIT WCAppInfo* self, SEL _cmd) _LOGOS_RETURN_RETAINED { HBLogDebug(@"-[<WCAppInfo: %p> init]", self); id r = _logos_orig$_ungrouped$WCAppInfo$init(self, _cmd); HBLogDebug(@" = %@", r); return r; }



static __attribute__((constructor)) void _logosLocalCtor_432c7a00(int argc, char **argv, char **envp) {
    if (checkPluginCanUse())
    {
        {Class _logos_class$_ungrouped$WCAppInfo = objc_getClass("WCAppInfo"); if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(setIsForceUpdate:), (IMP)&_logos_method$_ungrouped$WCAppInfo$setIsForceUpdate$, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$setIsForceUpdate$);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(isForceUpdate), (IMP)&_logos_method$_ungrouped$WCAppInfo$isForceUpdate, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$isForceUpdate);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(setFromUrl:), (IMP)&_logos_method$_ungrouped$WCAppInfo$setFromUrl$, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$setFromUrl$);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(fromUrl), (IMP)&_logos_method$_ungrouped$WCAppInfo$fromUrl, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$fromUrl);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(setInstallUrl:), (IMP)&_logos_method$_ungrouped$WCAppInfo$setInstallUrl$, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$setInstallUrl$);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(installUrl), (IMP)&_logos_method$_ungrouped$WCAppInfo$installUrl, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$installUrl);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(setVersion:), (IMP)&_logos_method$_ungrouped$WCAppInfo$setVersion$, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$setVersion$);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(version), (IMP)&_logos_method$_ungrouped$WCAppInfo$version, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$version);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(setAppName:), (IMP)&_logos_method$_ungrouped$WCAppInfo$setAppName$, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$setAppName$);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(appName), (IMP)&_logos_method$_ungrouped$WCAppInfo$appName, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$appName);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(setAppID:), (IMP)&_logos_method$_ungrouped$WCAppInfo$setAppID$, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$setAppID$);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(appID), (IMP)&_logos_method$_ungrouped$WCAppInfo$appID, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$appID);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(isValid), (IMP)&_logos_method$_ungrouped$WCAppInfo$isValid, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$isValid);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(initWithCoder:), (IMP)&_logos_method$_ungrouped$WCAppInfo$initWithCoder$, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$initWithCoder$);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(encodeWithCoder:), (IMP)&_logos_method$_ungrouped$WCAppInfo$encodeWithCoder$, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$encodeWithCoder$);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}if (_logos_class$_ungrouped$WCAppInfo) {MSHookMessageEx(_logos_class$_ungrouped$WCAppInfo, @selector(init), (IMP)&_logos_method$_ungrouped$WCAppInfo$init, (IMP*)&_logos_orig$_ungrouped$WCAppInfo$init);} else {HBLogError(@"logos: nil class %s", "WCAppInfo");}}
    }
    
}
